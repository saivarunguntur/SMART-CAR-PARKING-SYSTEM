# -*- coding: utf-8 -*-
"""PaddleOCR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19M4oGJmY0fj-5u-kE8h6kN3Mbnz1vjLM
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install ultralytics

!pip install paddleocr
!pip install "paddlepaddle>=2.4.2" -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html

import cv2
import os
import csv
from paddleocr import PaddleOCR
from ultralytics import YOLO

# === PATHS ===
video_path = "/content/drive/My Drive/YOUR_FOLDER/V8VID.avi"
model_path = "/content/drive/My Drive/YOUR_FOLDER/yolov8_training2/weights/best.pt"
csv_output_path = "/content/drive/My Drive/YOUR_FOLDER/paddleocr_output.csv"

# === INIT MODELS ===
yolo_model = YOLO(model_path)
ocr_model = PaddleOCR(use_angle_cls=True, lang='en')

# === VIDEO INPUT ===
cap = cv2.VideoCapture(video_path)
frame_count = 0
ocr_results = []

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1
    print(f"üìΩÔ∏è Processing frame {frame_count}...")

    # === YOLOv8 detection ===
    results = yolo_model.predict(frame, verbose=False)
    boxes = results[0].boxes.xyxy.cpu().numpy()

    for box in boxes:
        x1, y1, x2, y2 = map(int, box[:4])
        roi = frame[int(y1):int(y2), int(x1):int(x2)]

        if roi.size == 0:
            continue

        # === PaddleOCR on ROI ===
        ocr_out = ocr_model.ocr(roi)

        for line in ocr_out[0]:
            text = line[1][0]
            confidence = line[1][1]

            print(f"üîç Frame {frame_count} | OCR: {text} | Conf: {round(confidence, 3)}")

            if confidence >= 0.6:
                ocr_results.append({
                    "frame": frame_count,
                    "text": text,
                    "confidence": round(confidence, 3),
                    "x1": int(x1),
                    "y1": int(y1),
                    "x2": int(x2),
                    "y2": int(y2)
                })

cap.release()
print(f"\n‚úÖ Done! Processed {frame_count} frames.")
print(f"üìù Total OCR detections: {len(ocr_results)}")

# === SAVE TO CSV ===
if ocr_results:
    with open(csv_output_path, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=ocr_results[0].keys())
        writer.writeheader()
        writer.writerows(ocr_results)
    print(f"‚úÖ CSV saved at: {csv_output_path}")
else:
    print("‚ö†Ô∏è No valid text detected.")

import cv2
import os
import csv
from paddleocr import PaddleOCR
from ultralytics import YOLO

# === PATHS ===
video_path = "/content/drive/My Drive/YOUR_FOLDER/V8VID.avi"
model_path = "/content/drive/My Drive/YOUR_FOLDER/yolov8_training2/weights/best.pt"
csv_output_path = "/content/drive/My Drive/YOUR_FOLDER/paddleocr_output.csv"

# === INIT MODELS ===
yolo_model = YOLO(model_path)
ocr_model = PaddleOCR(use_angle_cls=True, lang='en')

# === VIDEO INPUT ===
cap = cv2.VideoCapture(video_path)
frame_count = 0
ocr_results = []

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1
    print(f"üìΩÔ∏è Processing frame {frame_count}...")

    results = yolo_model.predict(frame, verbose=False)
    boxes = results[0].boxes.xyxy.cpu().numpy()

    for box in boxes:
        x1, y1, x2, y2 = map(int, box[:4])
        roi = frame[int(y1):int(y2), int(x1):int(x2)]

        if roi.size == 0:
            continue

        try:
            ocr_out = ocr_model.ocr(roi)

            if ocr_out and isinstance(ocr_out, list) and len(ocr_out) > 0 and isinstance(ocr_out[0], list):
                for line in ocr_out[0]:
                    text = line[1][0]
                    confidence = line[1][1]

                    print(f"üîç Frame {frame_count} | OCR: {text} | Conf: {round(confidence, 3)}")

                    if confidence >= 0.6:
                        ocr_results.append({
                            "frame": frame_count,
                            "text": text,
                            "confidence": round(confidence, 3),
                            "x1": int(x1),
                            "y1": int(y1),
                            "x2": int(x2),
                            "y2": int(y2)
                        })
            else:
                print(f"‚ùå Frame {frame_count} | No valid OCR result returned.")

        except Exception as e:
            print(f"‚ö†Ô∏è Error in OCR at frame {frame_count}: {e}")
            continue

cap.release()
print(f"\n‚úÖ Done! Processed {frame_count} frames.")
print(f"üìù Total OCR detections: {len(ocr_results)}")

# === SAVE TO CSV ===
if ocr_results:
    with open(csv_output_path, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=ocr_results[0].keys())
        writer.writeheader()
        writer.writerows(ocr_results)
    print(f"‚úÖ CSV saved at: {csv_output_path}")
else:
    print("‚ö†Ô∏è No valid text detected.")